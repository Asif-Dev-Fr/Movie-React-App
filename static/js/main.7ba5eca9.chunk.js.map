{"version":3,"sources":["Components/Search.js","Components/ResultForOne.js","Components/Results.js","Components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","type","placeholder","onChange","handleInput","onKeyPress","search","ResultForOne","onClick","openPopup","result","imdbID","Poster","src","alt","Title","Results","results","map","value","key","Popup","selected","Year","imdbRating","Genre","Plot","Actors","closePopup","console","log","process","App","API_URL","useState","state","setState","e","target","prevState","axios","then","data","id","finding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7ba5eca9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Search = (props) => {\r\n    return(\r\n        <section className=\"searchBoxWrap\">\r\n            <input \r\n                type=\"text\" \r\n                className=\"searchbox\" \r\n                placeholder=\"Search for a movie\" \r\n                onChange={props.handleInput} \r\n                onKeyPress={props.search}\r\n            />\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\nconst ResultForOne = (props) => {\r\n    return(\r\n        <div className=\"resultForOne\" onClick={() => props.openPopup(props.result.imdbID)}>\r\n            {\r\n                (props.result.Poster !== 'N/A') ?  \r\n                <img src={props.result.Poster} alt={props.result.Title} /> : <div className=\"errorImg\">Image not available</div>  \r\n            }\r\n            <h3>{props.result.Title}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ResultForOne;","import React from 'react';\r\nimport ResultForOne from './ResultForOne';\r\n\r\nconst Results = ({results, openPopup}) => {\r\n    return (\r\n        <section className=\"results\">\r\n            {/* On récupère la propriété results dans les props et on va parcourir l'array avec la méthode map() */}\r\n            {results.map(value => (\r\n                <ResultForOne key={value.imdbID} result={value} openPopup={openPopup}/>\r\n            ))}\r\n        </section>\r\n    )\r\n}\r\n\r\n\r\nexport default Results;","import React from 'react';\r\n\r\nfunction Popup(props) {\r\n    return (\r\n        <section className=\"popup\">\r\n            <div className=\"content\">\r\n                <h2>{ props.selected.Title } <span>({ props.selected.Year })</span></h2>\r\n                <p className=\"rating\">Rating : { props.selected.imdbRating }</p>\r\n                <div className=\"plot\">\r\n                    <img src={props.selected.Poster} alt={ props.selected.Title } />\r\n                    <div className=\"details\">\r\n                        <p> Genre : {props.selected.Genre} </p>\r\n                        <p>{props.selected.Plot}</p>\r\n                        <p>Casting : {props.selected.Actors}</p>\r\n                    </div>\r\n                </div>\r\n                <button className=\"close\" onClick={props.closePopup}>Close</button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Popup;","import React, { useState } from 'react';\nimport './App.css';\n\nimport Search from './Components/Search';\nimport Results from './Components/Results';\nimport Popup from './Components/Popup';\n\nimport axios from 'axios';\n\nconsole.log(process.env.REACT_APP_API_KEY);\n\nconst App = () => {\n\n  // Commencer par installer : npm i axios\n\n  // étape 1 :\n  // API http://www.omdbapi.com/apikey.aspx\n  const API_URL = \"https://www.omdbapi.com/?apikey=\" + process.env.REACT_APP_API_KEY;\n\n\n  // On crée un state avec les propriétés qu'on va manipuler par la suite : \n  const [state, setState] = useState({\n    search: \"\",\n    results: [],\n    selected: {}\n  });\n\n  // rechercher les éléments taper dans recherche depuis l'api \n  // les données sont dans une array et le chemin est data[data][Search] donc on mettant data entre accolade dans le .then, on rentre dans le 2ème data\n  const searchMovie = (e) => {\n    if (e.key === \"Enter\") {\n      axios(API_URL + \"&s=\" + state.search).then(({data}) => {\n        console.log(data);\n        let result = data.Search;\n\n        // on récupère les informations de data.Search qu'on stocke dans une variable et puis on l'affecte à la propriété results de l'objet state qui est un tableau vide par défaut. \n        setState(prevState => {\n          return {...prevState, results : result}\n        })\n      })\n    }\n  }\n\n  // la fonction recherche : \n  const handleInput = (e) => {\n    let search = e.target.value;\n      \n    // on récupère l'ancienne valeur et on l'a change avec la nouveau valeur qu'on récupère avec e.target.value\n    setState(prevState => {\n      return { ...prevState, search : search }\n    });\n\n    // console.log(state.search);\n  }\n\n  // Fonction pour sélectionner un film en particulier : \n  // axios(API_URL + \"&i=\" + id) façon spécifique à cette API\n  const openPopup = (id) => {\n    axios(API_URL + \"&i=\" + id).then(({data}) => {\n      let finding = data;\n\n      setState(prevState => {\n        return {...prevState, selected: finding}\n      });\n    });\n  }\n\n  const closePopup = () => {\n    setState(prevState => {\n      return {...prevState, selected : {}}\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>React Project : Movie Database App</h1>\n      </header>\n      <main>\n        <Search handleInput={handleInput} search={searchMovie}/>\n\n\n        {/* Condition ternaire pour voir si l'utilisateur a bien tapé le nom d'un film existant : */}\n        {\n          (typeof state.results != \"undefined\") ?\n          (<Results results={state.results} openPopup={openPopup}/>) :\n          <div className=\"errorMovie\">Movie not found</div>\n        }\n        \n\n        {/* Condition pour déterminer si on a recherché quelque chose et si c'est le cas, on affiche les informations depuis le component Popup.js */}\n        {\n          (typeof state.selected.Title != \"undefined\" ) ? \n          <Popup selected={state.selected} closePopup={closePopup}/> : false \n        }\n\n      </main>\n    </div>\n  );\n  \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}